const EMOTION_TAG_SELECTOR = 'style[data-emotion="css"]';
const INSERTION_ANCHOR_ID = 'resolve-style-rendering-node';

let __didInvokeResolver__ = false;
/*
 * A cache that tracks tags that have been resolved. This prevents
 * the MutationObserver from adjusting the tag HTML Element again.
 */
const __resolvedCache__ = new Set();

function getHeadNode() {
	return document.getElementsByTagName( 'head' )[ 0 ];
}

/**
 * Retrieves the "insertion" anchor point for Emotion style tags to
 * re-order to when resolving styles.
 *
 * @return {HTMLStyleElement} The insertion style HTML node.
 */
function getInsertionAnchorNode() {
	let node = document.getElementById( INSERTION_ANCHOR_ID );
	if ( node ) return node;

	const headNode = getHeadNode();

	/*
	 * Injecting the insertion HTML element to act as the "anchor" point
	 * for Emotion tags to insert to.
	 */
	node = document.createElement( 'style' );
	node.id = INSERTION_ANCHOR_ID;

	headNode.prepend( node );

	return node;
}

/**
 * Checks if an HTML element is an Emotion style tag.
 *
 * @param {HTMLElement} node The HTMLElement to check.
 * @return {boolean} If the node is an Emotion style tag.
 */
function isEmotionStyleTag( node ) {
	return (
		node &&
		node.tagName === 'STYLE' &&
		node.getAttribute( 'data-emotion' ) === 'css'
	);
}

/**
 * Retrieves all rendered Emotion style tags.
 *
 * @return {Array<HTMLStyleElement>} A collection of Emotion style tags.
 */
function getEmotionStyleTags() {
	/*
	 * Note: querySelectorAll with HTML attribute does not work with IE11.
	 */
	return Array.from( document.querySelectorAll( EMOTION_TAG_SELECTOR ) );
}

/**
 * Reorders an Emotion style tag to the top of the document.head.
 *
 * This adjusts the cascading rendering order of the document.styleSheet,
 * allowing for non-Emotion style rules to be cascade afterwards.
 *
 * @param {HTMLStyleElement} node The Emotion style tag.
 */
function reorderEmotionStyleTag( node ) {
	if ( ! node ) return;
	// Ensure that reordering only happens for unresolved tags.
	if ( __resolvedCache__.has( node ) ) return;

	const headNode = getHeadNode();
	const insertionNode = getInsertionAnchorNode();

	headNode.insertBefore( node, insertionNode );

	// Marking it as "resolved", so it does not get moved again.
	__resolvedCache__.add( node );
}

/**
 * Creates an observer that resolves newly injected Emotion style tags.
 * This observer will resolve the style rendering for these Emotion tags
 * by shifting their position to the top of the document.head.
 *
 * @return {MutationObserver} The MutationObserver instance.
 */
function createEmotionStyleTagObserver() {
	if ( ! window ) {
		/* Escape in case of SSR or other non-browser env */
		return;
	}
	const { MutationObserver } = window;

	const headNode = getHeadNode();
	const config = { attributes: true, childList: true, subtree: true };

	const handleOnMutation = ( mutationsList ) => {
		for ( const mutation of mutationsList ) {
			if ( mutation.type === 'childList' ) {
				/*
				 * Only resolve when Emotion style tags are initially added.
				 */
				const [ targetNode ] = mutation.addedNodes;

				if ( isEmotionStyleTag( targetNode ) ) {
					reorderEmotionStyleTag( targetNode );
				}
			}
		}
	};

	const observer = new MutationObserver( handleOnMutation );
	observer.observe( headNode, config );

	return observer;
}

/**
 * Resolves styles generated by Emotion.
 *
 * This is achieved by ensuring that Emotion generated style rules are rendered
 * before other styles (such as link imported stylesheets). This technique
 * resolves specificity issues related to style rules from Emotion vs
 * non-Emotion sources accidentally overriding, especially as it relates
 * to ordering.
 *
 * This resolver helps smooth things out as we continue our efforts to
 * refactor and migrate styles over to CSS-in-JS generated styles.
 *
 * This can be removed once the styles are stable.
 */
function resolveEmotionStyleTagRendering() {
	if ( ! window ) {
		/* Escape in case of SSR or other non-browser env */
		return;
	}
	if ( __didInvokeResolver__ ) return;

	try {
		/*
		 * Shifting the order of Emotion rendered style tags to the top of
		 * the document.head. This resolves specificity conflicts between
		 * CSS-in-JS styles and stylesheet rendered styles.
		 */
		const styleTags = getEmotionStyleTags();
		styleTags.forEach( reorderEmotionStyleTag );

		/**
		 * Observe and resolve addition Emotion rendered style tags.
		 *
		 * This observer continues to function throughout the entire
		 * browsing session.
		 */
		createEmotionStyleTagObserver();
	} catch ( err ) {}

	// Ensure this resolver is only invoked once.
	__didInvokeResolver__ = true;
}

/*
 * This function is invoked immediately to resolve any Emotion rendered styles
 * within the context of WordPress/Gutenberg.
 */
resolveEmotionStyleTagRendering();
